{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const sendReports = createAsyncThunk('reports/sendReports', async (arg, thunkAPI) => {\n  const {\n    rejectWithValue,\n    getState\n  } = thunkAPI;\n  try {\n    const res = await fetch('http://localhost:3001/reports', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      body: JSON.stringify(arg)\n    });\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const getReports = createAsyncThunk('reports/getReports', async (arg, thunkAPI) => {\n  const {\n    rejectWithValue\n  } = thunkAPI;\n  try {\n    const res = await fetch('http://localhost:3001/reports');\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {};\nconst reports = createSlice({\n  name: 'reports',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(sendReports.pending, (state, action) => {\n      console.log(action);\n    }).addCase(sendReports.fulfilled, (state, action) => {\n      console.log(action);\n    }).addCase(sendReports.rejected, (state, action) => {\n      console.log(action);\n    })\n\n    //getReports\n    .addCase(getReports);\n  }\n});\nexport default reports.reducer;\nexport const reportsActions = reports.actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","sendReports","arg","thunkAPI","rejectWithValue","getState","res","fetch","method","headers","body","JSON","stringify","error","message","getReports","data","json","initialState","reports","name","reducers","extraReducers","builder","addCase","pending","state","action","console","log","fulfilled","rejected","reducer","reportsActions","actions"],"sources":["F:/Fron-task/CRUD-task/crud/src/DataCenter/DataCenter.js"],"sourcesContent":["import { createSlice , createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const sendReports = createAsyncThunk('reports/sendReports',async (arg,thunkAPI)=>{\r\n    const { rejectWithValue , getState } = thunkAPI;\r\n    try{\r\n        const res = await fetch('http://localhost:3001/reports',{\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-type':'application/json; charset=UTF-8'\r\n            },\r\n            body: JSON.stringify(arg)\r\n        })\r\n    }catch(error){ return rejectWithValue(error.message)}\r\n\r\n});\r\n\r\nexport const getReports = createAsyncThunk('reports/getReports', async(arg,thunkAPI)=>{\r\n    const {rejectWithValue} = thunkAPI;\r\n    try{\r\n        const res = await fetch('http://localhost:3001/reports');\r\n        const data = await res.json();\r\n        return data;\r\n    }catch(error){\r\n        return rejectWithValue(error.message)\r\n    }\r\n})\r\n\r\nconst initialState={\r\n\r\n};\r\n\r\nconst reports = createSlice({\r\n    name:'reports',\r\n    initialState,\r\n    reducers:{},\r\n    extraReducers: (builder)=>{\r\n        builder\r\n        .addCase(sendReports.pending , (state,action)=>{\r\n            console.log(action)\r\n        })\r\n        .addCase(sendReports.fulfilled , (state,action)=>{\r\n            console.log(action)\r\n        })\r\n        .addCase(sendReports.rejected,(state,action)=>{\r\n            console.log(action)\r\n        })\r\n\r\n        //getReports\r\n\r\n        .addCase(getReports)\r\n    }\r\n});\r\n\r\nexport default reports.reducer;\r\nexport const reportsActions = reports.actions;"],"mappings":"AAAA,SAASA,WAAW,EAAGC,gBAAgB,QAAQ,kBAAkB;AAEjE,OAAO,MAAMC,WAAW,GAAGD,gBAAgB,CAAC,qBAAqB,EAAC,OAAOE,GAAG,EAACC,QAAQ,KAAG;EACpF,MAAM;IAAEC,eAAe;IAAGC;EAAS,CAAC,GAAGF,QAAQ;EAC/C,IAAG;IACC,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAC;MACpDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAC;QACJ,cAAc,EAAC;MACnB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,GAAG;IAC5B,CAAC,CAAC;EACN,CAAC,QAAMW,KAAK,EAAC;IAAE,OAAOT,eAAe,CAACS,KAAK,CAACC,OAAO,CAAC;EAAA;AAExD,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGf,gBAAgB,CAAC,oBAAoB,EAAE,OAAME,GAAG,EAACC,QAAQ,KAAG;EAClF,MAAM;IAACC;EAAe,CAAC,GAAGD,QAAQ;EAClC,IAAG;IACC,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IACxD,MAAMS,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;IAC7B,OAAOD,IAAI;EACf,CAAC,QAAMH,KAAK,EAAC;IACT,OAAOT,eAAe,CAACS,KAAK,CAACC,OAAO,CAAC;EACzC;AACJ,CAAC,CAAC;AAEF,MAAMI,YAAY,GAAC,CAEnB,CAAC;AAED,MAAMC,OAAO,GAAGpB,WAAW,CAAC;EACxBqB,IAAI,EAAC,SAAS;EACdF,YAAY;EACZG,QAAQ,EAAC,CAAC,CAAC;EACXC,aAAa,EAAGC,OAAO,IAAG;IACtBA,OAAO,CACNC,OAAO,CAACvB,WAAW,CAACwB,OAAO,EAAG,CAACC,KAAK,EAACC,MAAM,KAAG;MAC3CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACvB,CAAC,CAAC,CACDH,OAAO,CAACvB,WAAW,CAAC6B,SAAS,EAAG,CAACJ,KAAK,EAACC,MAAM,KAAG;MAC7CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACvB,CAAC,CAAC,CACDH,OAAO,CAACvB,WAAW,CAAC8B,QAAQ,EAAC,CAACL,KAAK,EAACC,MAAM,KAAG;MAC1CC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACvB,CAAC;;IAED;IAAA,CAECH,OAAO,CAACT,UAAU,CAAC;EACxB;AACJ,CAAC,CAAC;AAEF,eAAeI,OAAO,CAACa,OAAO;AAC9B,OAAO,MAAMC,cAAc,GAAGd,OAAO,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}